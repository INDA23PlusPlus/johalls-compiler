<digit> ::= [0-9]
<letter> ::= [A-Z] | [a-z]
<whitespace> ::= " " | "\t" | "\n" | "\r"
<w> ::= <whitespace>

<arithmetic_operator> ::= "+" | "*" | "/" | "-"
<comparison_operator> ::= "==" | "!=" | ">" | ">=" | "<" | "<="

<binary_logical_operator> ::= "&&" | "||"
<unary_logical_operator> ::= "!"

<binary_bitwise_operator> ::= "^" | "|" | "&"
<unary_bitwise_operator> ::= "~"

<binary_operator> ::= <arithmetic_operator> | <binary_logical_operator> | <binary_bitwise_operator> | <comparison_operator>

<expr> ::= <expr> <w>* <binary_operator> <w>* <expr> | <unary_logical_operator> <expr> | <unary_bitwise_operator> <expr> | "(" <expr> ")" | <identifier> | <integer>
<identifier> ::= <letter> | "_" | <identifier> <digit> | <identifier> "_" | <identifier> <letter>

<integer> ::= <digit>+

<if> ::= "if" <w>+ <expr> <w>* "{" <lines> "}"
<else_if> ::= "else" <w>+ <if>
<else> ::= "else" <w>+ "{" <lines> "}"
<conditional> ::= <if> <w>* (<else_if> <w>*)* | <if> <w>* (<else_if> <w>*)* <w>* <else>

<declaration> ::= "let " <w>* <identifier> <w>* "=" <w>* <expr> ";"
<statement> ::= <conditional>
<line> ::= <statement> | <declaration>
<lines> ::= <w>* | <w>* <line> <w>* <lines>

<ret_statement> ::= "return" <w>+ <expr> <w>* ";"
<parameter_list> ::= <w>* | <identifier> <w>* ("," <w>* <identifier>)*
<function> ::= "fn" <w>+ <identifier> <w>* "(" <w>* <parameter_list> <w>* ")" <w>* "{" <lines> <w>* <ret_statement> <w>* "}"